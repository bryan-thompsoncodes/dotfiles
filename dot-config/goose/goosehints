# Goosehints - Project-specific guidance for AI assistance
# These hints help Goose understand your development environment and preferences

## Repository Structure

### Main Repositories
- **dotfiles**: ~/code/dotfiles - Personal configuration managed with GNU Stow
- **nix-configs**: ~/code/nix-configs - Nix flake for macOS (nix-darwin) and NixOS
- **VA projects**: ~/code/department-of-veterans-affairs/ - VA.gov development repositories

### VA Repository Environment Variable
All VA-related scripts and configurations use $VA_CODE_DIR environment variable:
- Default: ~/code/department-of-veterans-affairs
- Can be overridden by setting VA_CODE_DIR in environment
- Used in: setup-va-repos.sh, va-dev-session.sh, and all VA server functions

## Code Style & Preferences

### Shell Scripts (Bash/Zsh)
- Use `#!/usr/bin/env bash` or `#!/usr/bin/env zsh` for portability
- Always check command success with `|| return 1` or proper error handling
- Use environment variables with defaults: `${VAR:-default}`
- Validate required directories/files exist before operations
- Use `local` for function variables
- Prefer color output for user-facing scripts (see setup-va-repos.sh for pattern)
- NO trailing whitespace on empty lines

### Nix Files
- Follow community best practices and idiomatic Nix style
- Use `with pkgs;` sparingly, prefer explicit pkgs.packagename
- Add helpful comments explaining why specific versions or overrides are needed
- Group packages logically (editors, CLI tools, development, etc.)
- Use cross-platform patterns when applicable (see darwin-common.nix)
- Platform-specific code: use `lib.optionals stdenv.isLinux` or similar

### Git Commits
- Use imperative mood ("Add feature" not "Added feature")
- First line: brief summary (50 chars or less)
- Blank line, then detailed explanation if needed
- Reference related work or issues when applicable

### Documentation
- README files should be comprehensive but scannable
- Use clear section headers and code examples
- Document both "what" and "why" 
- Include cross-platform instructions where applicable
- Use emoji sparingly but effectively (‚úÖ ‚ùå ‚ö†Ô∏è üöÄ)

## Development Environment

### Nix Development Shells
- VA repositories use nix develop shells via direnv
- Setup script: ~/code/nix-configs/dev-envs/setup-va-envrcs.sh
- nix-direnv installed for fast shell caching
- Flake reference: ~/code/nix-configs#<env-name>

### VA Development Workflow
- Use provided shell functions: vets-website-server, vets-api-server, cl-storybook
- Tmux session template: va-tmux (or ~/.tmux/va-dev-session.sh)
- Each function validates repository exists before running
- Redis, PostgreSQL managed per VA project requirements

### Tools & Utilities
- **ripgrep (rg)**: Always prefer over grep for searching
- **eza**: Modern ls replacement (use for file listing examples)
- **bat**: Better cat with syntax highlighting
- **direnv**: Automatic environment switching (with nix-direnv caching)
- **stow**: Dotfile management (use --dotfiles flag)

## File Patterns to Avoid Tracking

### Dotfiles Repository
- Cache directories (goose MCP cache, etc.)
- Backup files (*.bak, *.bak.*)
- OS files (.DS_Store)
- Secrets (.gitconfig.local, API keys)
- Use whitelist approach for sensitive directories (see .gitignore goose pattern)

### Nix Configs
- result, result-* (Nix build outputs)
- .direnv/ (direnv cache)
- IDE files (.vscode/, .idea/)

## Cross-Platform Considerations

### macOS vs NixOS
- Shell configs use "source if exists" pattern for plugins
- Check multiple paths: Homebrew (/opt/homebrew), nix-darwin (/run/current-system/sw), standard Linux (/usr/share)
- Platform detection: `[[ "$OSTYPE" == "darwin"* ]]` or `stdenv.isDarwin`
- macOS-specific: Homebrew for GUI apps, pinentry-mac, SSH keychain

### Path Portability
- Use environment variables for customizable paths
- Provide sensible defaults with fallback pattern: `${VAR:-default}`
- Document platform-specific requirements in README

## Error Handling Best Practices

### Shell Functions
- Check directory existence before cd
- Validate each step in multi-step functions
- Return early on failure: `|| return 1`
- Provide helpful error messages with context
- Use `set -e` for scripts that should fail fast

### User Feedback
- Echo progress for long-running operations
- Use color coding: GREEN for success, YELLOW for warnings, RED for errors
- Confirm destructive operations before proceeding
- Show summary at completion

## Specific Project Patterns

### dotfiles
- Managed with GNU Stow and --dotfiles flag
- Cross-platform (macOS and NixOS)
- ZSH functions for VA development
- Tmux session templates for project workflows
- Related to nix-configs for dependency management

### nix-configs
- Flake-based configuration
- Host-specific configs (mbp, a6mbp, gnarbox)
- darwin-common.nix for shared macOS configuration
- Development shells for VA projects
- Hybrid Nix + Homebrew approach on macOS

### VA Projects
- Node/Ruby/PostgreSQL/Redis stacks
- Version-specific requirements (see dev-envs/*.nix)
- SOCKS proxy for certain operations (vtk socks)
- Docker for some services (Redis in next-build)

## Aliases & Commands to Remember

### System Updates
- `update-mbp`: Rebuild nix-darwin config for personal MacBook
- `update-a6mbp`: Rebuild nix-darwin config for work MacBook  
- `upgrade-mbp`: Update flake.lock + rebuild (same for a6mbp)
- `nix-flake-update`: Update nix-configs flake inputs

### VA Development
- `va-tmux`: Launch full VA development tmux session
- `vets-website-server [env]`: Start vets-website dev server
- `vets-api-server`: Start vets-api with Redis and foreman
- `cl-storybook`: Build and start component-library storybook
- `ddev-smart-start`: Start DDEV only if not already running

### Git Helpers
- `grb [N|ref]`: Interactive rebase (default 3 commits)

## Testing & Validation

### Before Committing
- Run `nix flake check` for nix-configs changes
- Test shell functions actually work
- Verify .gitignore patterns with `git check-ignore -v <file>`
- Check for trailing whitespace in shell scripts
- Ensure cross-platform compatibility

### Code Review Focus Areas
- Error handling completeness
- Environment variable usage consistency
- Documentation accuracy
- Security (no secrets committed)
- Cross-platform compatibility

## Common Mistakes to Avoid

1. **Hardcoded paths** - Use environment variables with defaults
2. **Missing error handling** - Always validate steps in shell functions
3. **Trailing whitespace** - Clean up empty lines in shell scripts
4. **Tracking cache files** - Use whitelist approach for sensitive directories
5. **Platform assumptions** - Test or document platform-specific code
6. **Incomplete documentation** - Update README when changing structure
7. **Breaking changes** - Maintain backward compatibility when possible

## Performance Optimizations

- nix-direnv dramatically speeds up development shell activation
- Use GC roots to prevent Nix garbage collection of dev shells
- Batch related file edits in single git commits
- Cache browser testing binaries outside Nix store

## Security Practices

- Never commit API keys, tokens, or secrets
- Use .gitconfig.local for signing keys
- Keep sensitive environment variables out of tracked configs
- Whitelist specific config files rather than blacklisting cache patterns
- Review `git status` before committing to catch unintended files
