# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Initialize Powerlevel10k (try multiple paths for cross-platform compatibility)
if [[ -f /opt/homebrew/share/powerlevel10k/powerlevel10k.zsh-theme ]]; then
  source /opt/homebrew/share/powerlevel10k/powerlevel10k.zsh-theme
elif [[ -f /run/current-system/sw/share/zsh-powerlevel10k/powerlevel10k.zsh-theme ]]; then
  source /run/current-system/sw/share/zsh-powerlevel10k/powerlevel10k.zsh-theme
elif [[ -f /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme ]]; then
  source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
fi

# Zsh options
setopt AUTO_CD  # Type directory name to cd into it (e.g., just type '..' or '/tmp')

# Enhanced completion settings
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case insensitive completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}" # Colored completion

# Zsh plugins (try multiple paths for cross-platform compatibility)
if [[ -f /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
  source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [[ -f /run/current-system/sw/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
  source /run/current-system/sw/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [[ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
  source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

if [[ -f /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
  source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [[ -f /run/current-system/sw/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
  source /run/current-system/sw/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [[ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
  source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Initialize direnv
eval "$(direnv hook zsh)"

# Set terminal title to show current command
autoload -Uz add-zsh-hook

function set_title_precmd {
  print -Pn "\e]0;%~\a"  # Set title to current directory
}

function set_title_preexec {
  # Get the first word of the command (handles aliases, functions, etc.)
  local cmd="${1%% *}"
  print -Pn "\e]0;$cmd\a"  # Set title to running command
}

add-zsh-hook precmd set_title_precmd
add-zsh-hook preexec set_title_preexec

# Environment variables
export EDITOR="nvim"
export VISUAL="nvim"
export PAGER="less"

# GPG configuration for commit signing
export GPG_TTY=$(tty)

# Directory paths (can be overridden by setting before sourcing .zshrc)
export VA_CODE_DIR="${VA_CODE_DIR:-$HOME/code/department-of-veterans-affairs}"
export NIX_CONFIG_DIR="${NIX_CONFIG_DIR:-$HOME/code/mac-nix-configs}"

# Use macOS system SSH for UseKeyChain support (macOS only)
if [[ "$OSTYPE" == "darwin"* ]]; then
  alias ssh='/usr/bin/ssh'
fi

# Node
export NODE_OPTIONS="--max-old-space-size=4096"

# PostgreSQL - Add libpq binaries to PATH (macOS Homebrew only, NixOS handles via system packages)
if [[ -d /opt/homebrew/opt/libpq/bin ]]; then
  export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
fi

# Custom functions

# VA Server Scripts
function cl-storybook {
  local base_dir="$VA_CODE_DIR/component-library/packages"

  # Check if component-library exists
  if [ ! -d "$VA_CODE_DIR/component-library" ]; then
    echo "Error: component-library repository not found at $VA_CODE_DIR/component-library"
    return 1
  fi

  # Build web-components
  cd "$base_dir/web-components/" || return 1
  echo "Building web-components..."
  yarn install || return 1
  yarn build || return 1
  yarn build-bindings || return 1

  # Build react-components
  cd ../react-components/ || return 1
  echo "Building react-components..."
  yarn install || return 1
  yarn build || return 1

  # Build core
  cd ../core/ || return 1
  echo "Building core..."
  yarn install || return 1
  yarn build || return 1

  # Start storybook
  cd ../storybook/ || return 1
  echo "Starting storybook..."
  yarn install || return 1
  yarn storybook
}

function vets-api-server {
  # Check if vets-api exists
  if [ ! -d "$VA_CODE_DIR/vets-api" ]; then
    echo "Error: vets-api repository not found at $VA_CODE_DIR/vets-api"
    return 1
  fi

  cd "$VA_CODE_DIR/vets-api" || return 1

  # Start Redis in the background if not already running
  if ! redis-server --daemonize yes 2>/dev/null; then
    echo "Warning: Could not start Redis (it may already be running)"
  fi

  # Start foreman
  foreman start -m all=1,clamd=0,freshclam=0
}

function vets-website-server {
  local env=${1:-static-pages,facilities}

  # Check if vets-website exists
  if [ ! -d "$VA_CODE_DIR/vets-website" ]; then
    echo "Error: vets-website repository not found at $VA_CODE_DIR/vets-website"
    return 1
  fi

  cd "$VA_CODE_DIR/vets-website" || return 1
  yarn watch --env="$env"
}

function ddev-smart-start {
  # Check if ddev containers are actually running, start only if needed
  # Check docker ps directly for running ddev web containers (most reliable method)
  if docker ps --format '{{.Names}}' 2>/dev/null | grep -qE '^ddev-.*-web$'; then
    ddev status
  else
    ddev start && ddev status
  fi
}

# Git rebase function
# Defaults to 3 commits back, otherwise use argument passed as:
# - Count if integer: interactive rebase last N commits
# - Commit hash or branch name if string: rebase onto that ref
# Example usage:
#   grb           # interactive rebase last 3 commits
#   grb 6         # interactive rebase last 6 commits
#   grb feature   # rebase onto branch 'feature'
#   grb abc1234   # rebase onto commit abc1234
function grb {
  local commits=${1:-3}
  if [[ $commits =~ ^[0-9]+$ ]]; then
    git rebase -i HEAD~$commits
  else
    git rebase $commits
  fi
}

# Aliases

# Modern tool replacements
alias cat="bat"
alias ls="eza --icons"
alias ll="eza -lah --icons"
alias la="eza -a --icons"
alias lla="eza -la"
alias lsa="eza -lah"
alias lt="eza --tree --icons"
alias vim="nvim"
alias vi="nvim"

# Utility aliases
alias clr="clear"
alias fman="compgen -c | fzf | xargs man"
alias va-tmux="~/.tmux/va-dev-session.sh"

# Git aliases
alias ga="git add"
alias gd="git diff"
alias gs="git status"
alias gst="git status"
alias gp="git push"
alias gl="git log --oneline --graph"
alias gco="git checkout"
alias gcob="git checkout -b"
alias gaa="git add --all"
alias gcm="git commit -m"
alias gbd="git branch -d"
alias gbD="git branch -D"
alias gpl="git pull"
alias gpF="git push --force"

# Nix flake update alias
alias nix-flake-update="nix flake update --flake $HOME/code/nix-configs"

# Nix rebuild aliases
alias update-mbp="sudo darwin-rebuild switch --flake ~/code/nix-configs/#mbp"
alias update-a6mbp="sudo darwin-rebuild switch --flake ~/code/nix-configs/#a6mbp"
alias update-gnarbox="sudo nixos-rebuild switch --flake ~/code/nix-configs/#gnarbox"

# Nix upgrade aliases (update flake.lock first, then rebuild)
alias upgrade-mbp="nix-flake-update && update-mbp"
alias upgrade-a6mbp="nix-flake-update && update-a6mbp"
alias upgrade-gnarbox="nix-flake-update && update-gnarbox"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
